Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body

    6 parameter: %empty
    7          | _TYPE _ID

    8 $@2: %empty

    9 body: _LBRACKET variable_list $@2 statement_list _RBRACKET

   10 variable_list: %empty
   11              | variable_list variable

   12 variable: _TYPE _ID _SEMICOLON

   13 statement_list: %empty
   14               | statement_list statement

   15 statement: compound_statement
   16          | assignment_statement
   17          | if_statement
   18          | return_statement

   19 compound_statement: _LBRACKET statement_list _RBRACKET

   20 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   21 num_exp: math_exp
   22        | num_exp _AROP math_exp
   23        | num_exp _MOD math_exp

   24 math_exp: exp
   25         | math_exp _MATOP exp

   26 exp: exponent_exp
   27    | _ABS num_exp _ABS
   28    | function_call
   29    | _LPAREN num_exp _RPAREN

   30 exponent_exp: literal
   31             | _ID
   32             | exponent_exp _EXP literal
   33             | exponent_exp _FAC

   34 literal: _INT_NUMBER
   35        | _UINT_NUMBER

   36 $@3: %empty

   37 function_call: _ID $@3 _LPAREN argument _RPAREN

   38 argument: %empty
   39         | num_exp

   40 if_statement: if_part
   41             | if_part _ELSE statement

   42 @4: %empty

   43 $@5: %empty

   44 if_part: _IF _LPAREN @4 rel_exp $@5 _RPAREN statement

   45 rel_exp: num_exp _RELOP num_exp

   46 return_statement: _RETURN num_exp _SEMICOLON


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    _TYPE <i> (258) 5 7 12
    _IF (259) 44
    _ELSE (260) 41
    _RETURN (261) 46
    _ID <s> (262) 5 7 12 20 31 37
    _INT_NUMBER <s> (263) 34
    _UINT_NUMBER <s> (264) 35
    _ABS (265) 27
    _LPAREN (266) 5 29 37 44
    _RPAREN (267) 5 29 37 44
    _LBRACKET (268) 9 19
    _RBRACKET (269) 9 19
    _ASSIGN (270) 20
    _SEMICOLON (271) 12 20 46
    _MOD (272) 23
    _EXP (273) 32
    _FAC (274) 33
    _MATOP <i> (275) 25
    _AROP <i> (276) 22
    _RELOP <i> (277) 45
    ONLY_IF (278)


Nonterminals, with rules where they appear

    $accept (24)
        on left: 0
    program (25)
        on left: 1
        on right: 0
    function_list (26)
        on left: 2 3
        on right: 1 3
    function (27)
        on left: 5
        on right: 2 3
    $@1 (28)
        on left: 4
        on right: 5
    parameter (29)
        on left: 6 7
        on right: 5
    body (30)
        on left: 9
        on right: 5
    $@2 (31)
        on left: 8
        on right: 9
    variable_list (32)
        on left: 10 11
        on right: 9 11
    variable (33)
        on left: 12
        on right: 11
    statement_list (34)
        on left: 13 14
        on right: 9 14 19
    statement (35)
        on left: 15 16 17 18
        on right: 14 41 44
    compound_statement (36)
        on left: 19
        on right: 15
    assignment_statement (37)
        on left: 20
        on right: 16
    num_exp <i> (38)
        on left: 21 22 23
        on right: 20 22 23 27 29 39 45 46
    math_exp <i> (39)
        on left: 24 25
        on right: 21 22 23 25
    exp <i> (40)
        on left: 26 27 28 29
        on right: 24 25
    exponent_exp <i> (41)
        on left: 30 31 32 33
        on right: 26 32 33
    literal <i> (42)
        on left: 34 35
        on right: 30 32
    function_call <i> (43)
        on left: 37
        on right: 28
    $@3 (44)
        on left: 36
        on right: 37
    argument <i> (45)
        on left: 38 39
        on right: 37
    if_statement (46)
        on left: 40 41
        on right: 17
    if_part <i> (47)
        on left: 44
        on right: 40 41
    @4 (48)
        on left: 42
        on right: 44
    $@5 (49)
        on left: 43
        on right: 44
    rel_exp <i> (50)
        on left: 45
        on right: 44
    return_statement (51)
        on left: 46
        on right: 18


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4


State 1

    5 function: _TYPE . _ID $@1 _LPAREN parameter _RPAREN body

    _ID  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    5 function: _TYPE _ID . $@1 _LPAREN parameter _RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    5 function: _TYPE _ID $@1 . _LPAREN parameter _RPAREN body

    _LPAREN  shift, and go to state 9


State 9

    5 function: _TYPE _ID $@1 _LPAREN . parameter _RPAREN body

    _TYPE  shift, and go to state 10

    $default  reduce using rule 6 (parameter)

    parameter  go to state 11


State 10

    7 parameter: _TYPE . _ID

    _ID  shift, and go to state 12


State 11

    5 function: _TYPE _ID $@1 _LPAREN parameter . _RPAREN body

    _RPAREN  shift, and go to state 13


State 12

    7 parameter: _TYPE _ID .

    $default  reduce using rule 7 (parameter)


State 13

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN . body

    _LBRACKET  shift, and go to state 14

    body  go to state 15


State 14

    9 body: _LBRACKET . variable_list $@2 statement_list _RBRACKET

    $default  reduce using rule 10 (variable_list)

    variable_list  go to state 16


State 15

    5 function: _TYPE _ID $@1 _LPAREN parameter _RPAREN body .

    $default  reduce using rule 5 (function)


State 16

    9 body: _LBRACKET variable_list . $@2 statement_list _RBRACKET
   11 variable_list: variable_list . variable

    _TYPE  shift, and go to state 17

    $default  reduce using rule 8 ($@2)

    $@2       go to state 18
    variable  go to state 19


State 17

   12 variable: _TYPE . _ID _SEMICOLON

    _ID  shift, and go to state 20


State 18

    9 body: _LBRACKET variable_list $@2 . statement_list _RBRACKET

    $default  reduce using rule 13 (statement_list)

    statement_list  go to state 21


State 19

   11 variable_list: variable_list variable .

    $default  reduce using rule 11 (variable_list)


State 20

   12 variable: _TYPE _ID . _SEMICOLON

    _SEMICOLON  shift, and go to state 22


State 21

    9 body: _LBRACKET variable_list $@2 statement_list . _RBRACKET
   14 statement_list: statement_list . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 27

    statement             go to state 28
    compound_statement    go to state 29
    assignment_statement  go to state 30
    if_statement          go to state 31
    if_part               go to state 32
    return_statement      go to state 33


State 22

   12 variable: _TYPE _ID _SEMICOLON .

    $default  reduce using rule 12 (variable)


State 23

   44 if_part: _IF . _LPAREN @4 rel_exp $@5 _RPAREN statement

    _LPAREN  shift, and go to state 34


State 24

   46 return_statement: _RETURN . num_exp _SEMICOLON

    _ID           shift, and go to state 35
    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37
    _ABS          shift, and go to state 38
    _LPAREN       shift, and go to state 39

    num_exp        go to state 40
    math_exp       go to state 41
    exp            go to state 42
    exponent_exp   go to state 43
    literal        go to state 44
    function_call  go to state 45


State 25

   20 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON

    _ASSIGN  shift, and go to state 46


State 26

   19 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 13 (statement_list)

    statement_list  go to state 47


State 27

    9 body: _LBRACKET variable_list $@2 statement_list _RBRACKET .

    $default  reduce using rule 9 (body)


State 28

   14 statement_list: statement_list statement .

    $default  reduce using rule 14 (statement_list)


State 29

   15 statement: compound_statement .

    $default  reduce using rule 15 (statement)


State 30

   16 statement: assignment_statement .

    $default  reduce using rule 16 (statement)


State 31

   17 statement: if_statement .

    $default  reduce using rule 17 (statement)


State 32

   40 if_statement: if_part .
   41             | if_part . _ELSE statement

    _ELSE  shift, and go to state 48

    $default  reduce using rule 40 (if_statement)


State 33

   18 statement: return_statement .

    $default  reduce using rule 18 (statement)


State 34

   44 if_part: _IF _LPAREN . @4 rel_exp $@5 _RPAREN statement

    $default  reduce using rule 42 (@4)

    @4  go to state 49


State 35

   31 exponent_exp: _ID .
   37 function_call: _ID . $@3 _LPAREN argument _RPAREN

    _LPAREN   reduce using rule 36 ($@3)
    $default  reduce using rule 31 (exponent_exp)

    $@3  go to state 50


State 36

   34 literal: _INT_NUMBER .

    $default  reduce using rule 34 (literal)


State 37

   35 literal: _UINT_NUMBER .

    $default  reduce using rule 35 (literal)


State 38

   27 exp: _ABS . num_exp _ABS

    _ID           shift, and go to state 35
    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37
    _ABS          shift, and go to state 38
    _LPAREN       shift, and go to state 39

    num_exp        go to state 51
    math_exp       go to state 41
    exp            go to state 42
    exponent_exp   go to state 43
    literal        go to state 44
    function_call  go to state 45


State 39

   29 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 35
    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37
    _ABS          shift, and go to state 38
    _LPAREN       shift, and go to state 39

    num_exp        go to state 52
    math_exp       go to state 41
    exp            go to state 42
    exponent_exp   go to state 43
    literal        go to state 44
    function_call  go to state 45


State 40

   22 num_exp: num_exp . _AROP math_exp
   23        | num_exp . _MOD math_exp
   46 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 53
    _MOD        shift, and go to state 54
    _AROP       shift, and go to state 55


State 41

   21 num_exp: math_exp .
   25 math_exp: math_exp . _MATOP exp

    _MATOP  shift, and go to state 56

    $default  reduce using rule 21 (num_exp)


State 42

   24 math_exp: exp .

    $default  reduce using rule 24 (math_exp)


State 43

   26 exp: exponent_exp .
   32 exponent_exp: exponent_exp . _EXP literal
   33             | exponent_exp . _FAC

    _EXP  shift, and go to state 57
    _FAC  shift, and go to state 58

    $default  reduce using rule 26 (exp)


State 44

   30 exponent_exp: literal .

    $default  reduce using rule 30 (exponent_exp)


State 45

   28 exp: function_call .

    $default  reduce using rule 28 (exp)


State 46

   20 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 35
    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37
    _ABS          shift, and go to state 38
    _LPAREN       shift, and go to state 39

    num_exp        go to state 59
    math_exp       go to state 41
    exp            go to state 42
    exponent_exp   go to state 43
    literal        go to state 44
    function_call  go to state 45


State 47

   14 statement_list: statement_list . statement
   19 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26
    _RBRACKET  shift, and go to state 60

    statement             go to state 28
    compound_statement    go to state 29
    assignment_statement  go to state 30
    if_statement          go to state 31
    if_part               go to state 32
    return_statement      go to state 33


State 48

   41 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26

    statement             go to state 61
    compound_statement    go to state 29
    assignment_statement  go to state 30
    if_statement          go to state 31
    if_part               go to state 32
    return_statement      go to state 33


State 49

   44 if_part: _IF _LPAREN @4 . rel_exp $@5 _RPAREN statement

    _ID           shift, and go to state 35
    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37
    _ABS          shift, and go to state 38
    _LPAREN       shift, and go to state 39

    num_exp        go to state 62
    math_exp       go to state 41
    exp            go to state 42
    exponent_exp   go to state 43
    literal        go to state 44
    function_call  go to state 45
    rel_exp        go to state 63


State 50

   37 function_call: _ID $@3 . _LPAREN argument _RPAREN

    _LPAREN  shift, and go to state 64


State 51

   22 num_exp: num_exp . _AROP math_exp
   23        | num_exp . _MOD math_exp
   27 exp: _ABS num_exp . _ABS

    _ABS   shift, and go to state 65
    _MOD   shift, and go to state 54
    _AROP  shift, and go to state 55


State 52

   22 num_exp: num_exp . _AROP math_exp
   23        | num_exp . _MOD math_exp
   29 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 66
    _MOD     shift, and go to state 54
    _AROP    shift, and go to state 55


State 53

   46 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 46 (return_statement)


State 54

   23 num_exp: num_exp _MOD . math_exp

    _ID           shift, and go to state 35
    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37
    _ABS          shift, and go to state 38
    _LPAREN       shift, and go to state 39

    math_exp       go to state 67
    exp            go to state 42
    exponent_exp   go to state 43
    literal        go to state 44
    function_call  go to state 45


State 55

   22 num_exp: num_exp _AROP . math_exp

    _ID           shift, and go to state 35
    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37
    _ABS          shift, and go to state 38
    _LPAREN       shift, and go to state 39

    math_exp       go to state 68
    exp            go to state 42
    exponent_exp   go to state 43
    literal        go to state 44
    function_call  go to state 45


State 56

   25 math_exp: math_exp _MATOP . exp

    _ID           shift, and go to state 35
    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37
    _ABS          shift, and go to state 38
    _LPAREN       shift, and go to state 39

    exp            go to state 69
    exponent_exp   go to state 43
    literal        go to state 44
    function_call  go to state 45


State 57

   32 exponent_exp: exponent_exp _EXP . literal

    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37

    literal  go to state 70


State 58

   33 exponent_exp: exponent_exp _FAC .

    $default  reduce using rule 33 (exponent_exp)


State 59

   20 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   22 num_exp: num_exp . _AROP math_exp
   23        | num_exp . _MOD math_exp

    _SEMICOLON  shift, and go to state 71
    _MOD        shift, and go to state 54
    _AROP       shift, and go to state 55


State 60

   19 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 19 (compound_statement)


State 61

   41 if_statement: if_part _ELSE statement .

    $default  reduce using rule 41 (if_statement)


State 62

   22 num_exp: num_exp . _AROP math_exp
   23        | num_exp . _MOD math_exp
   45 rel_exp: num_exp . _RELOP num_exp

    _MOD    shift, and go to state 54
    _AROP   shift, and go to state 55
    _RELOP  shift, and go to state 72


State 63

   44 if_part: _IF _LPAREN @4 rel_exp . $@5 _RPAREN statement

    $default  reduce using rule 43 ($@5)

    $@5  go to state 73


State 64

   37 function_call: _ID $@3 _LPAREN . argument _RPAREN

    _ID           shift, and go to state 35
    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37
    _ABS          shift, and go to state 38
    _LPAREN       shift, and go to state 39

    $default  reduce using rule 38 (argument)

    num_exp        go to state 74
    math_exp       go to state 41
    exp            go to state 42
    exponent_exp   go to state 43
    literal        go to state 44
    function_call  go to state 45
    argument       go to state 75


State 65

   27 exp: _ABS num_exp _ABS .

    $default  reduce using rule 27 (exp)


State 66

   29 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 29 (exp)


State 67

   23 num_exp: num_exp _MOD math_exp .
   25 math_exp: math_exp . _MATOP exp

    _MATOP  shift, and go to state 56

    $default  reduce using rule 23 (num_exp)


State 68

   22 num_exp: num_exp _AROP math_exp .
   25 math_exp: math_exp . _MATOP exp

    _MATOP  shift, and go to state 56

    $default  reduce using rule 22 (num_exp)


State 69

   25 math_exp: math_exp _MATOP exp .

    $default  reduce using rule 25 (math_exp)


State 70

   32 exponent_exp: exponent_exp _EXP literal .

    $default  reduce using rule 32 (exponent_exp)


State 71

   20 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 20 (assignment_statement)


State 72

   45 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 35
    _INT_NUMBER   shift, and go to state 36
    _UINT_NUMBER  shift, and go to state 37
    _ABS          shift, and go to state 38
    _LPAREN       shift, and go to state 39

    num_exp        go to state 76
    math_exp       go to state 41
    exp            go to state 42
    exponent_exp   go to state 43
    literal        go to state 44
    function_call  go to state 45


State 73

   44 if_part: _IF _LPAREN @4 rel_exp $@5 . _RPAREN statement

    _RPAREN  shift, and go to state 77


State 74

   22 num_exp: num_exp . _AROP math_exp
   23        | num_exp . _MOD math_exp
   39 argument: num_exp .

    _MOD   shift, and go to state 54
    _AROP  shift, and go to state 55

    $default  reduce using rule 39 (argument)


State 75

   37 function_call: _ID $@3 _LPAREN argument . _RPAREN

    _RPAREN  shift, and go to state 78


State 76

   22 num_exp: num_exp . _AROP math_exp
   23        | num_exp . _MOD math_exp
   45 rel_exp: num_exp _RELOP num_exp .

    _MOD   shift, and go to state 54
    _AROP  shift, and go to state 55

    $default  reduce using rule 45 (rel_exp)


State 77

   44 if_part: _IF _LPAREN @4 rel_exp $@5 _RPAREN . statement

    _IF        shift, and go to state 23
    _RETURN    shift, and go to state 24
    _ID        shift, and go to state 25
    _LBRACKET  shift, and go to state 26

    statement             go to state 79
    compound_statement    go to state 29
    assignment_statement  go to state 30
    if_statement          go to state 31
    if_part               go to state 32
    return_statement      go to state 33


State 78

   37 function_call: _ID $@3 _LPAREN argument _RPAREN .

    $default  reduce using rule 37 (function_call)


State 79

   44 if_part: _IF _LPAREN @4 rel_exp $@5 _RPAREN statement .

    $default  reduce using rule 44 (if_part)
